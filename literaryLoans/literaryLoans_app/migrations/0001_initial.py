# Generated by Django 4.2.11 on 2024-03-13 11:17

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pincode', models.BigIntegerField(default=0)),
                ('city', models.CharField(default='', max_length=255)),
                ('country', models.CharField(default='', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_id', models.SmallIntegerField(default=0)),
                ('name', models.CharField(default='', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_id', models.SmallIntegerField(default=0)),
                ('title', models.CharField(default='', max_length=255)),
                ('status', models.CharField(choices=[('0', 'available'), ('1', 'out of stock')], default='0', max_length=1)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('penalty', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('lender_id', models.SmallIntegerField(default=0)),
                ('quantity', models.IntegerField(default=0)),
                ('author_id', models.SmallIntegerField(default=0)),
                ('available', models.BooleanField(default=True)),
                ('book_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_book_rating', models.IntegerField(default=0)),
                ('condition_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_condition_rating', models.IntegerField(default=0)),
                ('image', models.ImageField(upload_to='book_images/')),
            ],
        ),
        migrations.CreateModel(
            name='BookGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_id', models.SmallIntegerField(default=0)),
                ('genre_id', models.SmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='BorrowRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.SmallIntegerField(default=0)),
                ('borrower_id', models.SmallIntegerField(default=0)),
                ('lender_id', models.SmallIntegerField(default=0)),
                ('book_id', models.SmallIntegerField(default=0)),
                ('status', models.CharField(choices=[('0', 'pending'), ('1', 'accepted'), ('2', 'rejected')], default='0', max_length=1)),
                ('quantity', models.IntegerField(default=0)),
                ('request_date', models.DateField(default=datetime.date.today)),
                ('return_date', models.DateField(default=datetime.date.today)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre_id', models.SmallIntegerField(default=0)),
                ('title', models.CharField(default='', max_length=255)),
                ('description', models.TextField(default='', max_length=1023)),
            ],
        ),
        migrations.CreateModel(
            name='Rented',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rent_id', models.SmallIntegerField(default=0)),
                ('borrower_id', models.SmallIntegerField(default=0)),
                ('lender_id', models.SmallIntegerField(default=0)),
                ('book_id', models.SmallIntegerField(default=0)),
                ('quantity', models.IntegerField(default=0)),
                ('rent_date', models.DateField(default=datetime.date.today)),
                ('return_date', models.DateField(default=datetime.date.today)),
            ],
        ),
        migrations.CreateModel(
            name='ReturnRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.SmallIntegerField(default=0)),
                ('borrower_id', models.SmallIntegerField(default=0)),
                ('lender_id', models.SmallIntegerField(default=0)),
                ('book_id', models.SmallIntegerField(default=0)),
                ('status', models.BooleanField(default=False)),
                ('quantity', models.IntegerField(default=0)),
                ('request_date', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('phone_no', models.CharField(blank=True, max_length=255, null=True, verbose_name='Phone Number')),
                ('pincode', models.BigIntegerField(blank=True, null=True, verbose_name='Pincode')),
                ('age', models.IntegerField(blank=True, null=True, verbose_name='Age')),
                ('gender', models.CharField(choices=[('f', 'female'), ('m', 'male'), ('n', 'prefer not to say')], default='n', max_length=1)),
                ('rating_asLender', models.DecimalField(blank=True, decimal_places=3, max_digits=4, null=True)),
                ('rating_asBorrower', models.DecimalField(blank=True, decimal_places=3, max_digits=4, null=True)),
                ('total_rating_asLender', models.IntegerField(blank=True, null=True)),
                ('total_rating_asBorrower', models.IntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
